---
name: Build container image

permissions:
  contents: read

on:
  workflow_call:
    secrets:
      image-registry-password:
        description: Password to log in to the container registry.
        required: true
    inputs:
      git-url:
        description: URL of the Git repository to build the image from.
        type: string
        required: true
      git-commit:
        description: Git commit ID to build the image from.
        type: string
        required: true
      image-registry-username:
        description: Username to log in to the container registry.
        type: string
        required: true
      image-registry:
        description: OCI registry to push images to.
        type: string
        required: true
      image-repository:
        description: The OCI repository to push the image to *without* the registry.
        type: string
        required: true
      image-tags:
        description: Space separated list of tags to apply to the image in the OCI repository.
        type: string
        required: true
      container-files:
        description: >-
          The list of Containerfile paths to perform a build using docker instructions. Separate
          filenames by newline.
        type: string
        required: true
    outputs:
      image-reference:
        description: Reference to the image built, including digest.
        value: ${{ jobs.build.outputs.image-reference }}
      image-digest:
        description: Digest of the image built.
        value: ${{ jobs.build.outputs.image-digest }}

jobs:
  build:
    outputs:
      image-reference: >-
        ${{ inputs.image-registry }}/${{ inputs.image-repository }}@${{ steps.push-image.outputs.digest }}
      image-digest: ${{ steps.push-image.outputs.digest }}

    runs-on: ubuntu-24.04

    permissions:
      # Needed for signing the container image with GitHub OIDC Token
      id-token: write
      contents: read
      attestations: write
      packages: write

    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ inputs.git-url }}
        ref: ${{ inputs.git-commit }}

    - name: Install Cosign
      uses: sigstore/cosign-installer@main

    - name: Install Syft
      uses: anchore/sbom-action/download-syft@v0.18.0

    - name: Log in to registry
      uses: redhat-actions/podman-login@v1
      with:
        registry: ${{ inputs.image-registry }}
        username: ${{ inputs.image-registry-username }}
        password: ${{ secrets.image-registry-password }}

    - name: Build image
      id: build-image
      uses: redhat-actions/buildah-build@v2
      with:
        image: ${{ inputs.image-registry }}/${{ inputs.image-repository }}
        tags: ${{ inputs.image-tags }}
        containerfiles: ${{ inputs.container-files }}

    - name: Push to registry
      id: push-image
      uses: redhat-actions/push-to-registry@v2
      with:
        registry: ${{ inputs.image-registry }}
        image: ${{ inputs.image-repository }}
        tags: ${{ steps.build-image.outputs.tags }}

    - name: Sign image with GitHub OIDC Token
      run: cosign sign --yes ${REF}
      env:
        REF: >-
          ${{ inputs.image-registry }}/${{ inputs.image-repository }}@${{ steps.push-image.outputs.digest }}

    - name: Generate and store SBOM
      run: |
          syft "${REF}" -o spdx-json=sbom-spdx.json
          cosign attest --yes --predicate sbom-spdx.json --type spdx "${REF}"
      env:
        REF: >-
          ${{ inputs.image-registry }}/${{ inputs.image-repository }}@${{ steps.push-image.outputs.digest }}

    - name: Generate artifact attestation
      id: attestation
      uses: actions/attest-build-provenance@v2
      with:
        subject-name: ${{ inputs.image-registry }}/${{ inputs.image-repository }}
        subject-digest: ${{ steps.push-image.outputs.digest }}

    # TODO: Hack to facilitate verification until https://github.com/sigstore/cosign/pull/3889
    - name: Attach attestation
      run: |
        #!/bin/bash
        set -euo pipefail

        PREDICATE_TYPE="$(< "${BUNDLE_PATH}" jq -r '.dsseEnvelope.payload | @base64d | fromjson | .predicateType')"
        < "${BUNDLE_PATH}" jq '.dsseEnvelope.payload | @base64d | fromjson | .predicate' > predicate.json

        cosign attest --yes --predicate predicate.json --type "${PREDICATE_TYPE}" "${REF}"
      env:
        BUNDLE_PATH: ${{ steps.attestation.outputs.bundle-path }}
        REF: >-
          ${{ inputs.image-registry }}/${{ inputs.image-repository }}@${{ steps.push-image.outputs.digest }}

    # container:
    #   image: quay.io/redhat-appstudio/rhtap-task-runner:1.3
    #   options: --privileged

    # steps:
    #   - name: Clone git repository
    #     id: clone
    #     uses: actions/checkout@v4
    #     with:
    #       fetch-depth: '2'
    #   - name: Pre-init
    #     run: |
    #       buildah --version
    #       syft --version
    #       cosign version
    #       ec version
    #       git config --global --add safe.directory $(pwd)
    #       cat rhtap/env.sh
    #   - name: Init
    #     run: bash /work/rhtap/init.sh
    #   - name: Build container image
    #     id: build
    #     run: |
    #       bash /work/rhtap/buildah-rhtap.sh
    #       # TODO: Get the actual digest
    #       echo "image-digest=dummy-digest" >> $GITHUB_OUTPUT
    #   - name: Sign container image
    #     id: sign
    #     run: /work/rhtap/cosign-sign-attest.sh

# TODO: Generate SLSA Provenance

